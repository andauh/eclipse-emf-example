/**
 * generated by Xtext 2.23.0
 */
package de.andhub.example.xtext.formatting2;

import com.google.inject.Inject;
import de.andhub.example.emf.todo.Category;
import de.andhub.example.emf.todo.TodoEntry;
import de.andhub.example.emf.todo.TodoSystem;
import de.andhub.example.emf.todo.User;
import de.andhub.example.xtext.services.TodoDslGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class TodoDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private TodoDslGrammarAccess _todoDslGrammarAccess;
  
  protected void _format(final TodoSystem todoSystem, @Extension final IFormattableDocument document) {
    EList<User> _users = todoSystem.getUsers();
    for (final User user : _users) {
      document.<User>format(user);
    }
    EList<Category> _categories = todoSystem.getCategories();
    for (final Category category : _categories) {
      document.<Category>format(category);
    }
  }
  
  protected void _format(final User user, @Extension final IFormattableDocument document) {
    EList<TodoEntry> _todoEntries = user.getTodoEntries();
    for (final TodoEntry todoEntry : _todoEntries) {
      document.<TodoEntry>format(todoEntry);
    }
  }
  
  public void format(final Object todoSystem, final IFormattableDocument document) {
    if (todoSystem instanceof XtextResource) {
      _format((XtextResource)todoSystem, document);
      return;
    } else if (todoSystem instanceof TodoSystem) {
      _format((TodoSystem)todoSystem, document);
      return;
    } else if (todoSystem instanceof User) {
      _format((User)todoSystem, document);
      return;
    } else if (todoSystem instanceof EObject) {
      _format((EObject)todoSystem, document);
      return;
    } else if (todoSystem == null) {
      _format((Void)null, document);
      return;
    } else if (todoSystem != null) {
      _format(todoSystem, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(todoSystem, document).toString());
    }
  }
}
